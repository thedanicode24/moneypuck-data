---
title: "Auston Matthews - Game Score"
format: html
editor: visual
---

## Import dataset

```{r}
url = "https://moneypuck.com/moneypuck/playerData/careers/gameByGame/regular/skaters/8479318.csv"
df <- read.csv(url)
# head(df)
```

## Read the data

```{r}
# install.packages("psych")
library(psych)
# describe(df)
```

## Data cleaning

```{r}
# install.packages("dplyr")
# install.packages("tidyr")
library(dplyr)
library(tidyr)

index_cols <- c("playerId", "season", "name", "gameId", "playerTeam", 
                "opposingTeam", "home_or_away", "gameDate", "position")

pivot_col <- "situation"
value_cols <- setdiff(colnames(df), c(index_cols, pivot_col))

df <- df %>%
  pivot_wider(
    id_cols = all_of(index_cols),
    names_from = all_of(pivot_col),
    values_from = all_of(value_cols),
    values_fn = list
  )

df <- df %>%
  mutate(across(everything(), ~ if(is.list(.)) sapply(., `[`, 1) else .))

df <- df %>%
  rename(gameScore = gameScore_all)
```

## Univariate Analysis

```{r}
data<-df$gameScore
summary(data)
```

```{r}
# install.packages("moments")
library(moments)

cat("Variance: \t\t", var(df$gameScore), "\n")
cat("Standard deviation\t", sd(df$gameScore), "\n")
cat("Skewness: \t\t", skewness(df$gameScore), "\n")
cat("Kurtosis: \t\t", kurtosis(df$gameScore)+3, "\n")
```

### Grouped Frequency Table

```{r}
min <- floor(min(df$gameScore))
max <- ceiling(max(df$gameScore))
num_bins = ceiling(sqrt(nrow(df))) # square root rule
breaks <- seq(min, max+1, length.out=num_bins)
df$gameScore_cat <- cut(df$gameScore, breaks=breaks, right=FALSE)
freq <- table(df$gameScore_cat)
barplot(freq, main = "Grouped Frequency Table", 
        xlab = "Game Score", ylab = "Number of games", col="skyblue")
grid()
```

## Cumulative Distributive Function

```{r}
# install.packages("ggplot2")
library(ggplot2)
cdf_fun <- ecdf(df$gameScore)
cdf_values <- cdf_fun(df$gameScore)
ggplot(df, aes(x=gameScore)) +
  stat_ecdf(geom="step") +
  labs(title="Game Score - Empirical CDF", x ="Game Score", y ="CDF")
```

## Probability Density Function

```{r}
library(ggplot2)

ggplot(df, aes(x=gameScore)) +
  geom_density(fill="lightblue", color="blue") +
  labs(title="Kernel Density Estimate", x="gameScore", y="Density")
```

## Modeling Distribution

```{r}
cdf_emp <- ecdf(df$gameScore)
x_vals <- sort(df$gameScore)
cdf_norm <- pnorm(x_vals, mean=mean(df$gameScore), sd=sd(df$gameScore))

plot(x_vals, cdf_emp(x_vals), type="s", col="blue", main="Empirical CDF vs Normal",
     xlab="Game Score", ylab="CDF")
lines(x_vals, cdf_norm, col="red", lwd=2)
legend("topleft", legend=c("Empirical CDF","Normal"), col=c("blue","red"), lwd=c(1,2))
grid()
```

```{r}
shapiro.test(df$gameScore)
```

```{r}
# install.packages("nortest")
library(nortest)
ad.test(df$gameScore)
```

```{r}
library(nortest)
lillie.test(df$gameScore)
```

```{r}
cvm.test(df$gameScore)
```

```{r}
cdf_emp <- ecdf(df$gameScore)
x_vals <- sort(df$gameScore)
loc <- median(df$gameScore)
sc <- IQR(df$gameScore)/2
cdf_cauchy <- pcauchy(x_vals, location = loc, scale = sc)
plot(x_vals, cdf_emp(x_vals), type="s", col="blue", main="Empirical CDF vs Cauchy",
     xlab="Game Score", ylab="CDF")
lines(x_vals, cdf_cauchy, col="red", lwd=2)
legend("topleft", legend=c("Empirical CDF","Cauchy"), col=c("blue","red"), lwd=c(1,2))
grid()
```

```{r}
# install.packages("extraDistr")
library(extraDistr)

cdf_emp <- ecdf(df$gameScore)
x_vals <- sort(df$gameScore)
loc <- median(df$gameScore)
sc <- IQR(df$gameScore)/2
cdf_laplace <- plaplace(x_vals, m=loc, s=sc)
plot(x_vals, cdf_emp(x_vals), type="s", col="blue", main="Empirical CDF vs Laplace",
     xlab="Game Score", ylab="CDF")
lines(x_vals, cdf_laplace, col="red", lwd=2)
legend("topleft", legend=c("Empirical CDF","Laplace"), col=c("blue","red"), lwd=c(1,2))
grid()
```

```{r}
cdf_emp <- ecdf(df$gameScore)
x_vals <- sort(df$gameScore)
loc <- median(df$gameScore)
sc <- IQR(df$gameScore)/1.349
cdf_logistic <- plogis(x_vals, location=loc, scale=sc)

plot(x_vals, cdf_emp(x_vals), type="s", col="blue", main="Empirical CDF vs Logistic",
     xlab="Game Score", ylab="CDF")
lines(x_vals, cdf_logistic, col="red", lwd=2)
legend("topleft", legend=c("Empirical CDF","Logistic"), col=c("blue","red"), lwd=c(1,2))
grid()
```
